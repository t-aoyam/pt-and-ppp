"""
Using the surprisal .json files generated by get_surprisal.py,
add the surprisal values back in to the original CELER corpus,
to the corresponding columns, where the column names are defined as:
surp-babyGPT2-[language]-[corpus]; e.g. surp-japanese-aochildes-l2
"""

import os
import pandas as pd
import json
from tqdm import tqdm
import argparse

def add_surprisals(surp_dir, ia_fp, output_fp):

    with open(ia_fp) as f:
        ia = [line.strip().split('\t') for line in f.readlines()]

    df = pd.DataFrame(ia[1:], columns=ia[0])

    surp_fps = os.listdir(surp_dir)
    for surp_fp in surp_fps:
        if not surp_fp.endswith('.json'):
            continue
        print(f"processing {surp_fp}...")
        with open(os.path.join(surp_dir, surp_fp)) as f:
            surprisal = json.load(f)

        model_name = surp_fp.split('.')[0]
        df[model_name] = [0]*len(df)
        prev_sid = None
        for i in tqdm(range(len(df))):
            sid = df.loc[i, 'sentenceid']
            if sid != prev_sid:  # first token of the new sentence
                if i != 0:
                    assert num_toks == len(surprisal[prev_sid])
                num_toks = 0
                keys = list(surprisal[sid].keys())
                vals = list(surprisal[sid].values())
            num_toks += 1
            tok_id, word = keys[num_toks-1].split()
            if word != df.loc[i, 'IA_LABEL']:
                print(word, df.loc[i, 'IA_LABEL'])
        #    assert word == df.loc[i, 'IA_LABEL']  # IA_LABEL is the word
            df.loc[i, model_name] = str(vals[num_toks-1])
            prev_sid = sid

    output = ['\t'.join(list(df.columns))]
    for i in range(len(df)):
        output.append('\t'.join(list(df.loc[i])))

    with open(output_fp, 'w') as f:
        f.write('\n'.join(output))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--surp_dir', help='Path to the directory containing surprisal .json data files.')
    parser.add_argument('--ia_fp', default=os.path.join('data', 'celer', 'data_v2.0', 'sent_ia.tsv'),
                        help='Path to the .tsv IA report data file.')
    parser.add_argument('--output_fp', default='ia_report_surps.tsv',
                        help='Path to the output .tsv')
    args = parser.parse_args()
    add_surprisals(args.surp_dir, args.ia_fp, args.output_fp)

if __name__ == "__main__":
    main()